{"version":3,"sources":["store/index.ts","api/api.js","components/Start.tsx","components/Finish.tsx","App.tsx","index.tsx"],"names":["fetchTodos","dispatch","url","options","fetch","then","res","ok","Error","status","json","type","todos","data","isLoading","state","loading","getMessage","message","initialState","store","createStore","action","console","log","composeWithDevTools","applyMiddleware","thunk","mapDispatch","load","connector","connect","title","onClick","disabled","Finish","useDispatch","useSelector","finishLoading","App","className","Root","ReactDOM","render","document","getElementById"],"mappings":"8RAoBaA,EAAa,kBAAM,SAACC,GClBV,IAACC,EAAKC,GAALD,EDmBd,QClBDE,MAAM,GAAD,OAHG,mCAGH,OAAeF,GAAOC,GAASE,MAAK,SAACC,GAC/C,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAJ,UAAaF,EAAIG,SAGzB,OAAOH,EAAII,WDaIL,MAAK,SAACC,GAAD,OAASL,EALU,CACzCU,KATgB,YAUhBC,MAGiDN,EAAIO,YAI1CC,EAAY,SAACC,GAAD,OAAsBA,EAAMC,SACxCC,EAAa,SAACF,GAAD,OAAsBA,EAAMG,SAShDC,EAA0B,CAC9BH,SAAS,EACTE,QAAS,GACTN,MAAO,IAkCMQ,EALDC,uBAzBM,WAA8C,IAA7CN,EAA4C,uDAApCI,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOX,MACb,IAtCkB,gBAuChB,OAAO,2BAAKI,GAAZ,IAAmBC,SAAS,IAE9B,IAxCmB,iBAyCjB,OAAO,2BACFD,GADL,IAEEC,SAAS,EACTE,QAASI,EAAOJ,UAGpB,IA9Cc,YAgDZ,OADAK,QAAQC,IAAI,SACL,2BACFT,GADL,IAEEH,MAAOU,EAAOV,QAGlB,QACE,OAAOG,KAOXU,8BAAoBC,0BAAgBC,OE5ChCC,G,MAAc,CAClBC,KFf0B,iBAAO,CAAElB,KALf,oBEiDPmB,EAtBGC,aAnBD,SAAChB,GAChB,MAAO,CACLC,QAASF,EAAUC,MAiBaa,EAsBrBE,EAZgB,SAAC,GAA8B,IAA5BD,EAA2B,EAA3BA,KAAMb,EAAqB,EAArBA,QAASgB,EAAY,EAAZA,MAC/C,OACE,4BACErB,KAAK,SACLsB,QAASJ,EACTK,SAAUlB,GAETgB,MCxCMG,EAA0B,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOd,EAAc,EAAdA,QACzCjB,EAAWmC,cACXpB,EAAUqB,YAAYvB,GAO5B,OACE,4BAAQH,KAAK,SAASsB,QANJ,WAClBhC,EAASD,KACTC,EHJyB,eAACiB,EAAD,uDAAW,aAAX,MAA6B,CACxDP,KANqB,iBAOrBO,WGEWoB,CAAcpB,KAIqBgB,UAAWlB,GACpDgB,ICKQO,EAhBH,WACV,IAAMvB,EAAUqB,YAAYvB,GACtBI,EAAUmB,YAAYpB,IAAe,SAE3C,OACE,yBAAKuB,UAAU,OACb,mDACA,4BAAKxB,EAAU,aAAeE,GAE9B,kBAAC,EAAD,CAAOc,MAAM,kBACb,kBAAC,EAAD,CAAQA,MAAM,kBAAkBd,QAAQ,yBACxC,kBAAC,EAAD,CAAQc,MAAM,eAAed,QAAQ,2CCXrCuB,EAAO,kBACX,kBAAC,IAAD,CAAUrB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNsB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.e536b164.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware, Dispatch } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { request } from \"../api/api\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// Action types - is just a constant. MUST have a unique value.\r\nconst START_LOADING = \"START_LOADING\";\r\nconst FINISH_LOADING = \"FINISH_LOADING\";\r\nconst GET_TODOS = \"GET_TODOS\";\r\n\r\n// Action creators - a function returning an action object\r\nexport const startLoading = () => ({ type: START_LOADING });\r\nexport const finishLoading = (message = \"No message\") => ({\r\n  type: FINISH_LOADING,\r\n  message,\r\n});\r\nexport const getTodos = (todos: any[]) => ({\r\n  type: GET_TODOS,\r\n  todos,\r\n});\r\nexport const fetchTodos = () => (dispatch: Dispatch) => {\r\n  request(\"todos\").then((res) => dispatch(getTodos(res.data)));\r\n};\r\n\r\n// Selectors - a function receiving Redux state and returning some data from it\r\nexport const isLoading = (state: RootState) => state.loading;\r\nexport const getMessage = (state: RootState) => state.message;\r\n\r\n// Initial state\r\nexport type RootState = {\r\n  loading: boolean;\r\n  message: string;\r\n  todos: any[];\r\n};\r\n\r\nconst initialState: RootState = {\r\n  loading: false,\r\n  message: \"\",\r\n  todos: [],\r\n};\r\n\r\n// rootReducer - this function is called after dispatching an action\r\nconst rootReducer = (state = initialState, action: AnyAction) => {\r\n  switch (action.type) {\r\n    case START_LOADING:\r\n      return { ...state, loading: true };\r\n\r\n    case FINISH_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: action.message,\r\n      };\r\n\r\n    case GET_TODOS:\r\n      console.log(\"todos\");\r\n      return {\r\n        ...state,\r\n        todos: action.todos,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)) // allows you to use http://extension.remotedev.io/\r\n);\r\n\r\nexport default store;\r\n","const BASE_URL = \"https://mate-api.herokuapp.com/\";\r\n\r\nexport const request = (url, options) => {\r\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\r\n    if (!res.ok) {\r\n      throw new Error(`${res.status}`);\r\n    }\r\n\r\n    return res.json();\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport { RootState, isLoading, startLoading } from '../store';\r\n\r\n/**\r\n * mapState - is a function receiving full Redux state as the first argument\r\n * and returning an object with extra props that will be added to a component\r\n * after calling connect(mapState)(MyComponent)\r\n *\r\n * @param {object} state - full Redux state\r\n *\r\n * @return {object}\r\n */\r\nconst mapState = (state: RootState) => {\r\n  return {\r\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\r\n  };\r\n};\r\n\r\n/**\r\n * We use an object syntax for `mapDispatch` where\r\n * `load` - is a callback name passed to the component as a prop\r\n * `startLoading` - is an action creator defined in the store\r\n */\r\nconst mapDispatch = {\r\n  load: startLoading,\r\n};\r\n\r\n/**\r\n * We split the connect(mapState, mapDispatch)(MyComponent) into 2 parts\r\n * to be able to use `typeof connector` for `MyComponent` props\r\n */\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\n/**\r\n * We use ConnectedProps<typeof connector> to get the type for all the extra\r\n * props received from `mapState` and `mapDispatch`\r\n */\r\ntype Props = ConnectedProps<typeof connector> & {\r\n  title: string; // a regular prop passed like <Start title=\"Start loading\" />\r\n};\r\n\r\nconst Start: React.FC<Props> = ({ load, loading, title }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={load}\r\n      disabled={loading}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default connector(Start);\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { isLoading, finishLoading, fetchTodos } from \"../store\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  message: string;\r\n};\r\n\r\nexport const Finish: React.FC<Props> = ({ title, message }) => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(isLoading);\r\n\r\n  const handleClick = () => {\r\n    dispatch(fetchTodos());\r\n    dispatch(finishLoading(message));\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" onClick={handleClick} disabled={!loading}>\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './App.scss';\r\nimport Start from './components/Start';\r\nimport { Finish } from './components/Finish';\r\n\r\nimport { isLoading, getMessage } from './store';\r\n\r\n\r\nconst App = () => {\r\n  const loading = useSelector(isLoading);\r\n  const message = useSelector(getMessage) || 'Ready!';\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Redux list of todos</h1>\r\n      <h2>{loading ? 'Loading...' : message}</h2>\r\n\r\n      <Start title=\"Start loading\" />\r\n      <Finish title=\"Succeed loading\" message=\"Loaded successfully!\" />\r\n      <Finish title=\"Fail loading\" message=\"An error occurred when loading data.\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport store from './store';\r\nimport App from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}