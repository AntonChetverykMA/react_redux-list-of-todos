{"version":3,"sources":["Interfaces/index.ts","store/index.ts","store/types.ts","api/api.js","store/actions.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","getTodosSelector","state","todos","getUserId","userId","getTodoId","todoId","getUser","user","getErrors","errors","getUserLoading","userLoading","initialState","store","createStore","action","type","id","bool","composeWithDevTools","applyMiddleware","thunk","request","url","options","fetch","then","res","ok","Error","status","json","updateUserLoading","resetErrors","Todo","todo","title","completed","activeTodo","useSelector","dispatch","useDispatch","className","cn","key","checked","readOnly","onClick","updateTodoId","updateUserID","TodoList","React","memo","useState","search","setSearch","selected","setSelected","useEffect","data","list","useMemo","todoCopy","filter","includes","value","placeholder","onChange","e","target","name","Object","values","map","option","length","CurrentUser","activeUserId","loading","catch","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50dec55d.chunk.js","sourcesContent":["export interface User {\n  name: string;\n  email: string;\n  phone: string;\n}\n\nexport enum Options {\n  all = \"all\",\n  active = \"active\",\n  completed = \"completed\",\n}\n","import { createStore, AnyAction, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport * as types from \"./types\";\nimport thunk from \"redux-thunk\";\nimport { User } from \"../Interfaces\";\n\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getTodoId = (state: RootState) => state.todoId;\nexport const getUser = (state: RootState) => state.user;\nexport const getErrors = (state: RootState) => state.errors;\nexport const getUserLoading = (state: RootState) => state.userLoading;\n\nexport type RootState = {\n  todos: any[];\n  userId: number;\n  todoId: number;\n  user: null | User;\n  errors: { [key: string]: any };\n  userLoading: boolean;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  userId: 0,\n  todoId: 0,\n  user: null,\n  errors: {},\n  userLoading: false,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case types.SET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case types.SET_USER:\n      return { ...state, user: action.user };\n\n    case types.SET_USER_ERROR:\n      return { ...state, errors: { ...state.errors, user: \"User not found\" } };\n\n    case types.UPDATE_USER_ID:\n      return { ...state, userId: action.id };\n\n    case types.UPDATE_TODO_ID:\n      return { ...state, todoId: action.id };\n\n    case types.CLEAR:\n      return { ...state, todoId: 0, userId: 0, user: {} };\n\n    case types.RESET_ERRORS:\n      return { ...state, errors: {} };\n\n    case types.USER_LOADING:\n      return { ...state, userLoading: action.bool };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","// Action types - is just a constant. MUST have a unique value.\n\nexport const SET_TODOS = \"SET_TODOS\";\nexport const UPDATE_TODO_ID = \"UPDATE_TODO_ID\";\nexport const UPDATE_USER_ID = \"UPDATE_USER_ID\";\nexport const SET_USER = \"SET_USER\";\nexport const SET_USER_ERROR = \"SET_USER_ERROR\";\nexport const CLEAR = \"CLEAR\";\nexport const RESET_ERRORS = \"RESET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\n","const BASE_URL = \"https://mate-api.herokuapp.com/\";\r\n\r\nexport const request = (url, options) => {\r\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\r\n    if (!res.ok) {\r\n      throw new Error(`${res.status}`);\r\n    }\r\n\r\n    return res.json();\r\n  });\r\n};\r\n","import { Dispatch } from \"redux\";\nimport { request } from \"../api/api\";\nimport { User } from \"../Interfaces\";\n\nimport {\n  SET_TODOS,\n  UPDATE_USER_ID,\n  UPDATE_TODO_ID,\n  SET_USER,\n  CLEAR,\n  SET_USER_ERROR,\n  RESET_ERRORS,\n  USER_LOADING,\n} from \"./types\";\n\n// Action creators - a function returning an action object\n\nexport const getTodos = (todos: any[]) => ({\n  type: SET_TODOS,\n  todos,\n});\n\nexport const fetchTodos = () => (dispatch: Dispatch) => {\n  request(\"todos\").then((res) => dispatch(getTodos(res.data)));\n};\n\nexport const updateUserID = (id: number) => ({\n  type: UPDATE_USER_ID,\n  id,\n});\n\nexport const updateTodoId = (id: number) => ({\n  type: UPDATE_TODO_ID,\n  id,\n});\n\nexport const getUserError = () => ({\n  type: SET_USER_ERROR,\n});\n\nexport const updateUserLoading = (bool: boolean) => ({\n  type: USER_LOADING,\n  bool,\n});\n\nexport const getUser = (user: User | {}) => ({\n  type: SET_USER,\n  user,\n});\n\nexport const fetchUser = (id: number) => (dispatch: Dispatch) => {\n  dispatch(updateUserLoading(true));\n\n  request(`users/${id}`)\n    .then((res) => {\n      dispatch(resetErrors());\n      if (res.data) {\n        dispatch(getUser(res.data));\n        dispatch(updateUserLoading(false));\n      } else {\n        throw new Error();\n      }\n    })\n    .catch(() => {\n      dispatch(getUser({}));\n      dispatch(getUserError());\n      dispatch(updateUserLoading(false));\n    });\n};\n\nexport const clear = () => ({\n  type: CLEAR,\n});\n\nexport const resetErrors = () => ({\n  type: RESET_ERRORS,\n});\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTodoId } from \"../../store\";\nimport { updateUserID, updateTodoId, clear } from \"../../store/actions\";\n\ninterface Todo {\n  id: number;\n  title: string;\n  userId: number;\n  completed: boolean;\n}\n\nexport const Todo: React.FC<{ todo: Todo }> = ({ todo }) => {\n  const { id, title, userId, completed } = todo;\n  const activeTodo = useSelector(getTodoId);\n\n  const dispatch = useDispatch();\n\n  return (\n    <li\n      className={cn(\n        \"TodoList__item \",\n        { \"TodoList__item--checked\": completed },\n        { \"TodoList__item--unchecked\": !completed }\n      )}\n      key={id}\n    >\n      <label>\n        <input type=\"checkbox\" checked={completed} readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={cn(\n          \"TodoList__user-button\",\n          { \"TodoList__user-button--selected\": activeTodo === id },\n          \"button\"\n        )}\n        type=\"button\"\n        onClick={() => {\n          if (id === activeTodo) {\n            dispatch(clear());\n            return;\n          }\n\n          dispatch(updateTodoId(id));\n          dispatch(updateUserID(userId));\n        }}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n};\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTodosSelector } from \"../../store\";\nimport { fetchTodos } from \"../../store/actions\";\nimport { Options } from \"../../Interfaces\";\n\nimport { Todo } from \"../Todo/Todo\";\n\nimport \"./TodoList.scss\";\n\nexport const TodoList = React.memo(() => {\n  const todos = useSelector(getTodosSelector);\n  const dispatch = useDispatch();\n  const [search, setSearch] = useState(\"\");\n  const [selected, setSelected] = useState(\"all\");\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, [dispatch]);\n\n  const list = useMemo(() => {\n    if (todos) {\n      let todoCopy = [...todos];\n\n      if (selected === \"active\") {\n        todoCopy = todoCopy.filter((todo) => todo.title && !todo.completed);\n      }\n\n      if (selected === \"completed\") {\n        todoCopy = todoCopy.filter((todo) => todo.title && todo.completed);\n      }\n\n      return todoCopy.filter(\n        (todo) => todo.title && todo.title.includes(search)\n      );\n    }\n\n    return [];\n  }, [todos, selected, search]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={search}\n        placeholder=\"search\"\n        onChange={(e) => setSearch(e.target.value)}\n      />\n\n      <select\n        name=\"select\"\n        value={selected}\n        onChange={(e) => setSelected(e.target.value)}\n      >\n        {Object.values(Options).map((option) => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {list.length > 0\n            ? list.map((todo) => <Todo todo={todo} key={todo.id} />)\n            : \"No todos\"}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect } from \"react\";\nimport \"./CurrentUser.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getUserId, getUser, getErrors, getUserLoading } from \"../../store\";\nimport { fetchUser, clear } from \"../../store/actions\";\n\nexport const CurrentUser = () => {\n  const activeUserId = useSelector(getUserId);\n  const user = useSelector(getUser);\n  const errors = useSelector(getErrors);\n  const loading = useSelector(getUserLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUser(activeUserId));\n  }, [activeUserId, dispatch]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {!loading && user ? (\n        errors.user ? (\n          \"Such user does not exist\"\n        ) : (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {activeUserId}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"clear-btn\"\n              onClick={() => dispatch(clear())}\n            >\n              Clear\n            </button>\n          </>\n        )\n      ) : (\n        <div className=\"loading\">Loading...</div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./App.scss\";\nimport { getUserId } from \"./store\";\nimport { TodoList } from \"./components/TodoList/TodoList\";\nimport { CurrentUser } from \"./components/CurrentUser/CurrentUser\";\n\nconst App = () => {\n  const userId = useSelector(getUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId ? <CurrentUser /> : \"User not selected\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport store from \"./store\";\nimport App from \"./App\";\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}