{"version":3,"sources":["store/index.ts","store/types.ts","api/api.js","components/Todo/Todo.tsx","store/actions.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getTodosSelector","state","todos","getUserId","userId","getTodoId","todoId","getUser","user","initialState","loading","store","createStore","action","type","id","composeWithDevTools","applyMiddleware","thunk","request","url","options","fetch","then","res","ok","Error","status","json","Todo","todo","title","completed","activeTodo","useSelector","dispatch","useDispatch","className","key","checked","readOnly","cn","onClick","updateTodoId","updateUserID","TodoList","useEffect","data","length","map","CurrentUser","activeUserId","name","email","phone","renderUser","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d2cf235.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport * as types from \"./types\";\nimport thunk from \"redux-thunk\";\nimport { User } from \"../Interfaces\";\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getTodoId = (state: RootState) => state.todoId;\nexport const getUser = (state: RootState) => state.user;\n\nexport type RootState = {\n  loading: boolean;\n  todos: any[];\n  userId: number;\n  todoId: number;\n  user: null | User;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  userId: 2,\n  todoId: 2,\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case types.START_LOADING:\n      return { ...state, loading: true };\n\n    case types.FINISH_LOADING:\n      return { ...state, loading: false };\n\n    case types.GET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case types.GET_USER:\n      return { ...state, user: action.user };\n\n    case types.UPDATE_USER_ID:\n      return { ...state, userId: action.id };\n\n    case types.UPDATE_TODO_ID:\n      return { ...state, todoId: action.id };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","// Action types - is just a constant. MUST have a unique value.\nexport const START_LOADING = \"START_LOADING\";\nexport const FINISH_LOADING = \"FINISH_LOADING\";\nexport const GET_TODOS = \"GET_TODOS\";\nexport const UPDATE_TODO_ID = \"UPDATE_TODO_ID\";\nexport const UPDATE_USER_ID = \"UPDATE_USER_ID\";\nexport const GET_USER = \"GET_USER\";\n","const BASE_URL = \"https://mate-api.herokuapp.com/\";\r\n\r\nexport const request = (url, options) => {\r\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\r\n    if (!res.ok) {\r\n      throw new Error(`${res.status}`);\r\n    }\r\n\r\n    return res.json();\r\n  });\r\n};\r\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTodoId } from \"../../store\";\nimport { updateUserID, updateTodoId } from \"../../store/actions\";\n\ninterface Todo {\n  id: number;\n  title: string;\n  userId: number;\n  completed: boolean;\n}\n\nexport const Todo: React.FC<{ todo: Todo }> = ({ todo }) => {\n  const { id, title, userId, completed } = todo;\n  const activeTodo = useSelector(getTodoId);\n  const dispatch = useDispatch();\n\n  return (\n    <li\n      className={`TodoList__item ${\n        completed ? \"TodoList__item--checked\" : \"TodoList__item--unchecked\"\n      }`}\n      key={id}\n    >\n      <label>\n        <input type=\"checkbox\" checked={completed} readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={cn(\n          \"TodoList__user-button\",\n          { \"TodoList__user-button--selected\": activeTodo === id },\n          \"button\"\n        )}\n        type=\"button\"\n        onClick={() => {\n          dispatch(updateTodoId(id));\n          dispatch(updateUserID(userId));\n        }}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n};\n","import { Dispatch } from \"redux\";\nimport { request } from \"../api/api\";\nimport { User } from \"../Interfaces\";\n\nimport {\n  START_LOADING,\n  FINISH_LOADING,\n  GET_TODOS,\n  UPDATE_USER_ID,\n  UPDATE_TODO_ID,\n  GET_USER,\n} from \"./types\";\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\n\nexport const finishLoading = (message = \"No message\") => ({\n  type: FINISH_LOADING,\n  message,\n});\n\nexport const getTodos = (todos: any[]) => ({\n  type: GET_TODOS,\n  todos,\n});\n\nexport const fetchTodos = () => (dispatch: Dispatch) => {\n  request(\"todos\").then((res) => dispatch(getTodos(res.data)));\n};\n\nexport const updateUserID = (id: number) => ({\n  type: UPDATE_USER_ID,\n  id,\n});\n\nexport const updateTodoId = (id: number) => ({\n  type: UPDATE_TODO_ID,\n  id,\n});\n\nexport const getUser = (user: User) => ({\n  type: GET_USER,\n  user,\n});\n\nexport const fetchUser = (id: number) => (dispatch: Dispatch) => {\n  request(`users/${id}`).then((res) => dispatch(getUser(res.data)));\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTodosSelector } from \"../../store\";\nimport { fetchTodos } from \"../../store/actions\";\n\nimport { Todo } from \"../Todo/Todo\";\n\nimport \"./TodoList.scss\";\n\nexport const TodoList = () => {\n  const todos = useSelector(getTodosSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.length > 0\n            ? todos.map((todo) => <Todo todo={todo} key={todo.id} />)\n            : \"No todos\"}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport \"./CurrentUser.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getUserId, getUser } from \"../../store\";\nimport { User } from \"../../Interfaces\";\nimport { fetchUser } from \"../../store/actions\";\n\nconst error = false;\n\nexport const CurrentUser = () => {\n  const activeUserId = useSelector(getUserId);\n  const user = useSelector(getUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUser(activeUserId));\n    // eslint-disable-next-line\n  }, [activeUserId]);\n\n  const renderUser = (user: User) => {\n    return error ? (\n      \"Such user does not exist\"\n    ) : (\n      <>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {activeUserId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button type=\"button\" className=\"clear-btn\">\n          Clear\n        </button>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? renderUser(user) : <div className=\"loading\">Loading...</div>}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./App.scss\";\nimport { getUserId } from \"./store\";\nimport { TodoList } from \"./components/TodoList/TodoList\";\nimport { CurrentUser } from \"./components/CurrentUser/CurrentUser\";\n\nconst App = () => {\n  const userId = useSelector(getUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId ? <CurrentUser /> : \"User not selected\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport store from './store';\r\nimport App from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}